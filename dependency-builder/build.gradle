/*
 * dependency-builder/build.gradle
 *
 * pdf2htmlEX-Android (https://github.com/ViliusSutkus89/pdf2htmlEX-Android)
 * Android port of pdf2htmlEX - Convert PDF to HTML without losing text or format.
 *
 * Copyright (c) 2019 - 2022 ViliusSutkus89.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 32
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 32
        ndk.abiFilters = project.hasProperty('abi') ? [ project.property('abi') ] : ["arm64-v8a", "armeabi-v7a", "x86", "x86_64"]
        externalNativeBuild.cmake.arguments "-DANDROID_STL=c++_shared"
    }
    buildTypes.release.externalNativeBuild.cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
    buildTypes.debug.externalNativeBuild.cmake.arguments '-DBUILD_3RDPARTY_BINARIES=ON'
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version '3.18.1'
    }
    ndkVersion '25.0.8775105'
    buildFeatures.prefab true
}

// Issue #1
task touchGlibPackage(type: Exec) {
    commandLine 'touch', 'src/main/cpp/packages/glib-2.0.cmake'
    commandLine 'touch', 'src/main/cpp/CMakeLists.txt'
}
preBuild.dependsOn touchGlibPackage

abstract class GatherArtifacts extends DefaultTask {
    @Input
    abstract Property<String> getCMakeBuildType()

    @Input
    abstract Property<String> getGradleBuildType()

    @Input
    abstract ListProperty<String> getABIs()

    @OutputDirectory
    final Provider<Directory> jniLibs = gradleBuildType.map {project.file("build/outputs/$it/jniLibs") }

    @OutputDirectory
    final Provider<Directory> assets = gradleBuildType.map {project.file("build/outputs/$it/assets") }

    @InputDirectory
    final Provider<Directory> installed = CMakeBuildType.map { project.file("build/installed/$it") }

    @TaskAction
    void gather() {
        ABIs.get().each { abi ->
            project.copy {
                into("${jniLibs.get()}/$abi")
                from("${installed.get()}/$abi/lib/libpdf2htmlEX.so")
            }
        }

        project.copy {
            into("${assets.get()}/pdf2htmlEX")
            from("${installed.get()}/${ABIs.get()[0]}")
            include 'share/pdf2htmlEX/**'
            include 'share/poppler/**'
            include 'share/fonts/**'
            include 'etc/fonts/**'
        }
    }
}

tasks.register('gatherReleaseArtifacts', GatherArtifacts).configure {
    tasks.named('generateReleaseAssets').get().dependsOn(it)
    it.dependsOn 'externalNativeBuildRelease'

    CMakeBuildType = 'MinSizeRel'
    gradleBuildType = 'release'
    ABIs = project.android.defaultConfig.ndk.abiFilters
}

tasks.register('gatherDebugArtifacts', GatherArtifacts).configure {
    tasks.named('generateDebugAssets').get().dependsOn(it)
    it.dependsOn 'externalNativeBuildDebug'

    CMakeBuildType = 'Debug'
    gradleBuildType = 'debug'
    ABIs = project.android.defaultConfig.ndk.abiFilters
}
