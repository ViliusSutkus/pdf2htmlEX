#  MIT License
#
#  Copyright (c) 2021 Vilius Sutkus <ViliusSutkus89@gmail.com>
#
#  https://github.com/ViliusSutkus89/Sample_Android_Library-MavenCentral-Instrumented_Tests
#  .github/workflows/unprivilegedBuild.yml - v2.0.0
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

name: unprivilegedBuild
on:
  workflow_dispatch:
  push:
    branches-ignore: [ master ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/unprivilegedBuild.yml'

env:
  ANDROID_NDK:        "23.1.7779620"
  ANDROID_CMAKE:      "3.18.1"
  TARBALL_CACHE_KEY:  "tarballs-key-3"

permissions:
  actions: none
  checks: none
  contents: none
  deployments: none
  issues: none
  packages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  buildDependencies:
    if: "!contains(github.event.head_commit.message, '[SkipCI]') && !contains(github.event.head_commit.message, '[AppOnly]')"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        abi: [ x86, x86_64, armeabi-v7a, arm64-v8a ]
        buildType: [ Debug, Release ]
        include:
          - buildType: Debug
            CMakeBuildType: Debug
          - buildType: Release
            CMakeBuildType: MinSizeRel
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - uses: android-actions/setup-android@v2
      - run: sdkmanager "ndk;${{env.ANDROID_NDK}}" "cmake;${{env.ANDROID_CMAKE}}"
      # gperf is required by fontconfig, gettext is required by libfontforge
      - run: sudo apt-get install --yes gperf gettext
      # apt-get offers meson-0.53.2, pdf2htmlEX-Android requires meson-0.54.2 or newer
      # ninja is required to build projects, using meson build system
      - run: pip3 install --user meson ninja

      - name: Cache tarballs
        uses: actions/cache@v2
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Build dependencies of pdf2htmlEX-Android
        run: ./gradlew dependency-builder:assemble${{ matrix.buildType }} -Pabi=${{ matrix.abi }}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: dependencyBuildLogs-${{ matrix.buildType }}-${{ matrix.abi }}
          path: |
            dependency-builder/.cxx/**/*-configure-*.log
            dependency-builder/.cxx/**/*-build-*.log
            dependency-builder/.cxx/**/*-install-*.log
          if-no-files-found: error

      - name: Prepare built dependencies for artifacting
        run: |
          mkdir -p i/${{ matrix.abi }}/{bin,etc,include,lib,share}
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/bin/pkg-config         i/${{ matrix.abi }}/bin/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/bin/pkg-config-dynamic i/${{ matrix.abi }}/bin/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/lib/pkgconfig          i/${{ matrix.abi }}/lib/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/share/pkgconfig        i/${{ matrix.abi }}/share/

          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/include/pdf2htmlEX.h   i/${{ matrix.abi }}/include/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/lib/libpdf2htmlEX.so   i/${{ matrix.abi }}/lib/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/bin/libpdf2htmlEX-exe_not_lib.so i/${{ matrix.abi }}/bin/

          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/share/pdf2htmlEX i/${{ matrix.abi }}/share/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/share/poppler    i/${{ matrix.abi }}/share/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/share/fonts      i/${{ matrix.abi }}/share/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/etc/fonts        i/${{ matrix.abi }}/etc/

      - name: Artifact assets
        uses: actions/upload-artifact@v2
        with:
          name: dependencies-${{ matrix.buildType }}-${{ matrix.abi }}
          path: i
          if-no-files-found: error

  buildLibrary:
    needs: buildDependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - uses: android-actions/setup-android@v2
      - run: sdkmanager "ndk;${{env.ANDROID_NDK}}" "cmake;${{env.ANDROID_CMAKE}}"

      - name: Cache tarballs
        uses: actions/cache@v2
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Print out downloaded artifacts for debugging purposes
        run: find artifacts

      - name: Prepare downloaded artifacts
        run: |
          mkdir -p dependency-builder/build/installed/{Debug,MinSizeRel}
          mv artifacts/dependencies-Release-*/* dependency-builder/build/installed/MinSizeRel/
          mv artifacts/dependencies-Debug-*/*   dependency-builder/build/installed/Debug/

          find dependency-builder/build/installed -type f -name 'pkg-config' -exec chmod +x {} \;
          find dependency-builder/build/installed -type f -name 'pkg-config-dynamic' -exec chmod +x {} \;

      - run: ./gradlew build lintRelease

      - run: mv pdf2htmlEX/build/reports/lint-results-release.html library-lint-report.html
      - uses: actions/upload-artifact@v2
        with:
          name: library-lint-report.html
          path: library-lint-report.html
          if-no-files-found: error

      - run: ./gradlew publishToMavenLocal
      - uses: actions/upload-artifact@v2
        with:
          name: maven-local
          path: ~/.m2
          if-no-files-found: error

  runInstrumentedTests:
    needs: buildLibrary
    # Only macos VMs are available with exposed CPU extensions to run hardware accelerated emulator
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        include:
          # Oldest API supported by NDK
          - arch: x86
            api-level: 16
            api-type-target: default
          # Oldest x86_64 image
          - arch: x86_64
            api-level: 21
            api-type-target: default
          # Latest x86 image
          - arch: x86
            api-level: 30
            api-type-target: google_apis
          # Latest image
          - arch: x86_64
            api-level: 32
            api-type-target: google_apis
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - uses: android-actions/setup-android@v2

      - uses: actions/download-artifact@v2
        with:
          name: maven-local
          path: ~/.m2

      - run: ./ci-scripts/prepareLibraryTestsForStagingRepository pdf2htmlEX --output=build/lib-staging --repository=mavenLocal

      - uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.api-type-target }}
          script: ./gradlew connectedCheck
          working-directory: build/lib-staging

      - run: tar -cvf instrumentedTestsReport-${{ matrix.api-level }}-${{ matrix.arch }}.tar build/lib-staging/pdf2htmlEX/build/reports/androidTests/connected
        if: always()
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: instrumentedTestsReport-${{ matrix.api-level }}-${{ matrix.arch }}.tar
          path: instrumentedTestsReport-${{ matrix.api-level }}-${{ matrix.arch }}.tar
          if-no-files-found: error

  buildApplicationAgainstUnreleasedLibrary:
    needs: buildLibrary
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - uses: android-actions/setup-android@v2

      - uses: actions/download-artifact@v2
        with:
          name: maven-local
          path: ~/.m2

      - name: Prepare app for staging repository
        run: ./ci-scripts/prepareSampleAppForStagingRepository application app --output=build/application-staging --repository=mavenLocal

      - name: Build and lint sample app from staging library
        run: ./gradlew build lintRelease
        working-directory: build/application-staging

      - uses: actions/upload-artifact@v2
        with:
          name: application-staging-apks
          path: build/application-staging/app/build/outputs/apk/**/*.apk
          if-no-files-found: error

      - run: mv build/application-staging/app/build/reports/lint-results-release.html application-lint-report.html
      - uses: actions/upload-artifact@v2
        with:
          name: application-lint-report.html
          path: application-lint-report.html
          if-no-files-found: error

  buildApplicationAgainstReleasedLibrary:
    if: "!contains(github.event.head_commit.message, '[SkipCI]') && contains(github.event.head_commit.message, '[AppOnly]')"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - uses: android-actions/setup-android@v2

      - name: Build and lint application
        run: ./gradlew build lintRelease
        working-directory: application

      - uses: actions/upload-artifact@v2
        with:
          name: APKs
          path: application/app/build/outputs/apk/**/*.apk
          if-no-files-found: error

      - run: mv application/app/build/reports/lint-results-release.html application-lint-report.html
      - uses: actions/upload-artifact@v2
        with:
          name: application-lint-report.html
          path: application-lint-report.html
          if-no-files-found: error
